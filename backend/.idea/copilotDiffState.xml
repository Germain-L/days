<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env" />
              <option name="updatedContent" value="POSTGRES_DB=exampledb&#10;POSTGRES_USER=exampleuser&#10;POSTGRES_PASSWORD=examplepass&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db/queries/days.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db/queries/days.sql" />
              <option name="updatedContent" value="-- name: CreateDay :one&#10;INSERT INTO days (user_id, date, title, description, mood)&#10;VALUES ($1, $2, $3, $4, $5)&#10;RETURNING *;&#10;&#10;-- name: GetDay :one&#10;SELECT * FROM days WHERE id = $1;&#10;&#10;-- name: GetDayByUserAndDate :one&#10;SELECT * FROM days WHERE user_id = $1 AND date = $2;&#10;&#10;-- name: ListDaysByUser :many&#10;SELECT * FROM days &#10;WHERE user_id = $1&#10;ORDER BY date DESC;&#10;&#10;-- name: ListDaysByUserAndDateRange :many&#10;SELECT * FROM days&#10;WHERE user_id = $1 &#10;  AND date &gt;= $2 &#10;  AND date &lt;= $3&#10;ORDER BY date DESC;&#10;&#10;-- name: UpdateDay :one&#10;UPDATE days&#10;SET title = $2, description = $3, mood = $4, updated_at = NOW()&#10;WHERE id = $1&#10;RETURNING *;&#10;&#10;-- name: DeleteDay :exec&#10;DELETE FROM days WHERE id = $1;&#10;&#10;-- name: GetUserDaysCount :one&#10;SELECT COUNT(*) FROM days WHERE user_id = $1;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db/queries/users.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db/queries/users.sql" />
              <option name="updatedContent" value="-- name: CreateUser :one&#10;INSERT INTO users (email, name)&#10;VALUES ($1, $2)&#10;RETURNING *;&#10;&#10;-- name: GetUser :one&#10;SELECT * FROM users WHERE id = $1;&#10;&#10;-- name: GetUserByEmail :one&#10;SELECT * FROM users WHERE email = $1;&#10;&#10;-- name: ListUsers :many&#10;SELECT * FROM users&#10;ORDER BY created_at DESC;&#10;&#10;-- name: UpdateUser :one&#10;UPDATE users&#10;SET name = $2, updated_at = NOW()&#10;WHERE id = $1&#10;RETURNING *;&#10;&#10;-- name: DeleteUser :exec&#10;DELETE FROM users WHERE id = $1;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db/schema.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db/schema.sql" />
              <option name="updatedContent" value="-- Database schema for the days project&#10;&#10;CREATE EXTENSION IF NOT EXISTS &quot;uuid-ossp&quot;;&#10;&#10;-- Users table&#10;CREATE TABLE users (&#10;    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),&#10;    email VARCHAR(255) UNIQUE NOT NULL,&#10;    name VARCHAR(255) NOT NULL,&#10;    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),&#10;    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()&#10;);&#10;&#10;-- Days table - representing individual days/entries&#10;CREATE TABLE days (&#10;    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),&#10;    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,&#10;    date DATE NOT NULL,&#10;    title VARCHAR(255),&#10;    description TEXT,&#10;    mood INTEGER CHECK (mood &gt;= 1 AND mood &lt;= 10), -- 1-10 mood scale&#10;    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),&#10;    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),&#10;    UNIQUE(user_id, date) -- One entry per user per day&#10;);&#10;&#10;-- Create indexes for better performance&#10;CREATE INDEX idx_days_user_id ON days(user_id);&#10;CREATE INDEX idx_days_date ON days(date);&#10;CREATE INDEX idx_users_email ON users(email);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/go.mod">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/go.mod" />
              <option name="originalContent" value="module days&#10;&#10;go 1.21&#10;&#10;require github.com/google/uuid v1.6.0&#10;" />
              <option name="updatedContent" value="module days&#10;&#10;go 1.21&#10;&#10;require (&#10;&#9;github.com/google/uuid v1.6.0&#10;&#9;github.com/jackc/pgx/v5 v5.6.0&#10;&#9;github.com/joho/godotenv v1.5.1&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sqlc.yaml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sqlc.yaml" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="version: &quot;2&quot;&#10;sql:&#10;  - engine: &quot;postgresql&quot;&#10;    schema: &quot;db/schema.sql&quot;&#10;    queries: &quot;db/queries&quot;&#10;    gen:&#10;      go:&#10;        package: &quot;db&quot;&#10;        out: &quot;db/sqlc&quot;&#10;        sql_package: &quot;pgx/v5&quot;&#10;        emit_json_tags: true&#10;        emit_interface: true&#10;        emit_exact_table_names: false&#10;        emit_pointers_for_null_types: true&#10;    overrides:&#10;      - db_type: &quot;timestamptz&quot;&#10;        go_type: &quot;time.Time&quot;&#10;      - db_type: &quot;uuid&quot;&#10;        go_type: &quot;github.com/google/uuid.UUID&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>