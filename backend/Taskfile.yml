# Backend Taskfile
version: '3'

tasks:
  build:
    desc: Build the backend server
    cmds:
      - go build -o days-server.exe cmd/server/main.go
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - days-server.exe

  test:
    desc: Run backend tests with coverage
    env:
      GO_ENV: test
      JWT_SECRET: test-secret-for-all-tests
    cmds:
      - go mod tidy
      - go vet ./...
      - go build ./...
      - go test -v -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - go tool cover -func=coverage.out

  test:unit:
    desc: Run only unit tests (fast)
    env:
      GO_ENV: test
      JWT_SECRET: test-secret-for-all-tests
    cmds:
      - go test -short ./...

  test:race:
    desc: Run tests with race detection (requires CGO)
    env:
      GO_ENV: test
      JWT_SECRET: test-secret-for-all-tests
      CGO_ENABLED: 1
    cmds:
      - go mod tidy
      - go vet ./...
      - go build ./...
      - go test -v -race -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - go tool cover -func=coverage.out

  test:integration:
    desc: Run integration tests
    env:
      GO_ENV: test
      JWT_SECRET: test-secret-for-all-tests
    cmds:
      - go test -v ./... -tags=integration

  swagger:
    desc: Generate Swagger documentation
    cmds:
      - swag init -g cmd/server/main.go
      - echo "Swagger documentation generated!"
      - echo "Generated files:"
      - echo "   - docs/docs.go"
      - echo "   - docs/swagger.json"
      - echo "   - docs/swagger.yaml"
      - echo "Start the server and visit http://localhost:8080/swagger/ to view docs"
    sources:
      - "**/*.go"
    generates:
      - docs/docs.go
      - docs/swagger.json
      - docs/swagger.yaml

  run:
    desc: Run the backend server
    cmds:
      - go run cmd/server/main.go

  dev:
    desc: Run backend in development mode with auto-reload
    cmds:
      - task: swagger
      - task: run

  clean:
    desc: Clean backend build artifacts
    cmds:
      - rm -f days-server.exe main.exe
      - rm -f coverage.out coverage.html
      - rm -rf docs/

  deps:
    desc: Install/update backend dependencies
    cmds:
      - go mod tidy
      - go mod download

  lint:
    desc: Run linting checks
    cmds:
      - go vet ./...
      - go fmt ./...
