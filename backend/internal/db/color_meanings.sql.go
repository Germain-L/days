// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: color_meanings.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createColorMeaning = `-- name: CreateColorMeaning :one
INSERT INTO color_meanings (calendar_id, color_hex, meaning)
VALUES ($1, $2, $3)
RETURNING id, calendar_id, color_hex, meaning, created_at
`

type CreateColorMeaningParams struct {
	CalendarID uuid.UUID `json:"calendar_id"`
	ColorHex   string    `json:"color_hex"`
	Meaning    string    `json:"meaning"`
}

func (q *Queries) CreateColorMeaning(ctx context.Context, arg CreateColorMeaningParams) (ColorMeaning, error) {
	row := q.db.QueryRowContext(ctx, createColorMeaning, arg.CalendarID, arg.ColorHex, arg.Meaning)
	var i ColorMeaning
	err := row.Scan(
		&i.ID,
		&i.CalendarID,
		&i.ColorHex,
		&i.Meaning,
		&i.CreatedAt,
	)
	return i, err
}

const deleteColorMeaning = `-- name: DeleteColorMeaning :exec
DELETE FROM color_meanings
WHERE id = $1
`

func (q *Queries) DeleteColorMeaning(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteColorMeaning, id)
	return err
}

const getColorMeaningByID = `-- name: GetColorMeaningByID :one
SELECT id, calendar_id, color_hex, meaning, created_at FROM color_meanings
WHERE id = $1
`

func (q *Queries) GetColorMeaningByID(ctx context.Context, id uuid.UUID) (ColorMeaning, error) {
	row := q.db.QueryRowContext(ctx, getColorMeaningByID, id)
	var i ColorMeaning
	err := row.Scan(
		&i.ID,
		&i.CalendarID,
		&i.ColorHex,
		&i.Meaning,
		&i.CreatedAt,
	)
	return i, err
}

const getColorMeaningsByCalendarID = `-- name: GetColorMeaningsByCalendarID :many
SELECT id, calendar_id, color_hex, meaning, created_at FROM color_meanings
WHERE calendar_id = $1
ORDER BY created_at
`

func (q *Queries) GetColorMeaningsByCalendarID(ctx context.Context, calendarID uuid.UUID) ([]ColorMeaning, error) {
	rows, err := q.db.QueryContext(ctx, getColorMeaningsByCalendarID, calendarID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ColorMeaning
	for rows.Next() {
		var i ColorMeaning
		if err := rows.Scan(
			&i.ID,
			&i.CalendarID,
			&i.ColorHex,
			&i.Meaning,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateColorMeaning = `-- name: UpdateColorMeaning :one
UPDATE color_meanings
SET color_hex = $2, meaning = $3
WHERE id = $1
RETURNING id, calendar_id, color_hex, meaning, created_at
`

type UpdateColorMeaningParams struct {
	ID       uuid.UUID `json:"id"`
	ColorHex string    `json:"color_hex"`
	Meaning  string    `json:"meaning"`
}

func (q *Queries) UpdateColorMeaning(ctx context.Context, arg UpdateColorMeaningParams) (ColorMeaning, error) {
	row := q.db.QueryRowContext(ctx, updateColorMeaning, arg.ID, arg.ColorHex, arg.Meaning)
	var i ColorMeaning
	err := row.Scan(
		&i.ID,
		&i.CalendarID,
		&i.ColorHex,
		&i.Meaning,
		&i.CreatedAt,
	)
	return i, err
}
