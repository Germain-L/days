// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: calendars.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCalendar = `-- name: CreateCalendar :one
INSERT INTO calendars (user_id, name, description)
VALUES ($1, $2, $3)
RETURNING id, user_id, name, description, created_at, updated_at
`

type CreateCalendarParams struct {
	UserID      uuid.UUID      `json:"user_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateCalendar(ctx context.Context, arg CreateCalendarParams) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, createCalendar, arg.UserID, arg.Name, arg.Description)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCalendar = `-- name: DeleteCalendar :exec
DELETE FROM calendars
WHERE id = $1
`

func (q *Queries) DeleteCalendar(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCalendar, id)
	return err
}

const getCalendarByID = `-- name: GetCalendarByID :one
SELECT id, user_id, name, description, created_at, updated_at FROM calendars
WHERE id = $1
`

func (q *Queries) GetCalendarByID(ctx context.Context, id uuid.UUID) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, getCalendarByID, id)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCalendarsByUserID = `-- name: GetCalendarsByUserID :many
SELECT id, user_id, name, description, created_at, updated_at FROM calendars
WHERE user_id = $1
ORDER BY created_at
`

func (q *Queries) GetCalendarsByUserID(ctx context.Context, userID uuid.UUID) ([]Calendar, error) {
	rows, err := q.db.QueryContext(ctx, getCalendarsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Calendar
	for rows.Next() {
		var i Calendar
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCalendar = `-- name: UpdateCalendar :one
UPDATE calendars
SET name = $2, description = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, name, description, created_at, updated_at
`

type UpdateCalendarParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateCalendar(ctx context.Context, arg UpdateCalendarParams) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, updateCalendar, arg.ID, arg.Name, arg.Description)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
